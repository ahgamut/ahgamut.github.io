<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C on Blog Needs a Name</title><link>https://ahgamut.github.io/categories/c/</link><description>Recent content in C on Blog Needs a Name</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 13 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://ahgamut.github.io/categories/c/index.xml" rel="self" type="application/rss+xml"/><item><title>Patching GCC to build Actually Portable Executables</title><link>https://ahgamut.github.io/2023/07/13/patching-gcc-cosmo/</link><pubDate>Thu, 13 Jul 2023 00:00:00 +0000</pubDate><guid>https://ahgamut.github.io/2023/07/13/patching-gcc-cosmo/</guid><description>2023-07-13: I wrote a ~2000-line gcc patch to simplify building Actually Portable Executables with Cosmopolitan Libc. Now you can build popular software such as bash, curl, git, ninja, and even gcc itself, with Cosmopolitan Libc via the ./configure or cmake build system, without having to change source code, and the built executables should run on Linux, FreeBSD, MacOS, OpenBSD, NetBSD, and Windows too1. You can download the binaries built using Github Actions here: https://github.</description></item><item><title>Debugging C With Cosmopolitan Libc</title><link>https://ahgamut.github.io/2022/10/23/debugging-c-with-cosmo/</link><pubDate>Sun, 23 Oct 2022 00:00:00 +0000</pubDate><guid>https://ahgamut.github.io/2022/10/23/debugging-c-with-cosmo/</guid><description>Cosmopolitan Libc provides a suite of debugging features that enhance the C development experience: function call tracing, gdb integration, an ASAN/UBSAN runtime, and more! A lot of fast and critical code is written in C &amp;ndash; If you&amp;rsquo;re using software written in C, interfacing with C libraries, fixing bugs in C code, or even rewriting C software in some other language, it helps to understand what your C code is doing.</description></item><item><title>Rust and Cosmopolitan Libc</title><link>https://ahgamut.github.io/2022/07/27/ape-rust-example/</link><pubDate>Wed, 27 Jul 2022 00:00:00 +0000</pubDate><guid>https://ahgamut.github.io/2022/07/27/ape-rust-example/</guid><description>2023-11-01 Update: I found out that Rust decides system constants like EINVAL and SIGTERM at compile-time, which means that the portability of Rust executables is limited to x86_64-linux and aarch64-linux, the targets with which the executables are built. It&amp;rsquo;s good to know that Cosmo can be a viable target for Rust, and perhaps later we may use extern system constants in Rust [just like I use them in C][https://github.com/ahgamut/gcc/tree/portcosmo-11.2].</description></item><item><title>Python is Actually Portable</title><link>https://ahgamut.github.io/2021/07/13/ape-python/</link><pubDate>Tue, 13 Jul 2021 00:00:00 +0000</pubDate><guid>https://ahgamut.github.io/2021/07/13/ape-python/</guid><description>Update (2024-04-15): The Python executable build process described in this post is from 2021, and both Cosmopolitan Libc and the surrounding tooling have improved since 2021. The build process is much simpler now, you can download Python 3.11.4 Actually Portable Executables built via Github Actions at https://github.com/ahgamut/superconfigure &amp;ndash; one of the Python binaries downloaded from that repo has datasette which runs like this:
Update (2022-07-27) : This post describes a proof-of-concept Python executable (2.</description></item><item><title>Actually Portable Executables</title><link>https://ahgamut.github.io/2021/02/27/ape-cosmo/</link><pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate><guid>https://ahgamut.github.io/2021/02/27/ape-cosmo/</guid><description>I came across Cosmopolitan on Hacker News, and I was initially confused, due to a few memories of cross-compilation nightmares: while it should be possible to compile for the same architecture regardless of operating system, wouldn&amp;rsquo;t the OS get confused by the leading bytes of the executable? I read the article explaining how it works, but most of it went over my head.
The example on the Github README used the following script for compilation:</description></item></channel></rss>